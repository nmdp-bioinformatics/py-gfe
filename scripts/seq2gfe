#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import pandas as pd

from Bio import SeqIO
from BioSQL import BioSeqDatabase
from BioSQL.BioSeq import DBSeq
from seqann import BioSeqAnn, gfe
from seqann.blast_cmd import get_locus
import time


def main():
    """This is run if file is directly executed, but not if imported as
    module. Having this in a separate function  allows importing the file
    into interactive python, and still able to execute the
    function for testing"""
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file",
                        required=True,
                        help="input file",
                        type=str)

    parser.add_argument("-l", "--locus",
                        required=False,
                        help="HLA locus",
                        type=str)

    parser.add_argument("-o", "--output",
                        required=True,
                        help="Output file where GFE will be stored",
                        type=str)    

    parser.add_argument("-k", "--kir",
                        required=False,
                        help="Bool for KIR",
                        action='store_true')

    parser.add_argument("-s", "--server",
                        required=False,
                        help="BioSQL server",
                        default=False,
                        type=bool)

    parser.add_argument("-v", "--verbose",
                        help="Option for running in verbose",
                        action='store_true')

    args = parser.parse_args()
    fastafile = args.file
    loc = args.locus
    serv = args.server
    output_filename = args.output

    verbose = False
    if args.verbose:
        verbose = True

    kir = False
    if args.kir:
        kir = True

    server = None
    if serv:
        server = BioSeqDatabase.open_database(driver="pymysql", user="root",
                                              passwd="", host="localhost",
                                              db="bioseqdb")

    seqann = BioSeqAnn(verbose=verbose, server=server, kir=kir)

    id_spacer = '{:*^20}'.format("")
    f_out = open(output_filename, 'a+')
    f_out.seek(0)
    ids = []
    for line in f_out:
        if id_spacer in line:
            spacer1, id, spacer2 = line.split(' ')
            ids.append(id)
    num_existing_ids = len(ids)
    if num_existing_ids:
        print(num_existing_ids, "rows in existing output")

    f_out.write(','.join(['Description', 'GFE', 'Feature', 'Method', 'Sequence']) + '\n')

    gfe_maker = gfe.GFE()
    start_time_rel = start_time_abs = time.time()
    n = 0
    num_no_hit = 0
    for seq in SeqIO.parse(fastafile, "fasta"):
        try:
            if seq._seq and seq.description not in ids:
                if not loc:
                    loc = get_locus(seq, kir=kir, verbose=verbose,
                                    refdata=seqann.refdata)
                id, project, method, source, allele_index, allele_name = seq.description.split('|')
                try:
                    ann = seqann.annotate(seq, loc, allele=allele_name)
                except ValueError as e:
                    print("Skipping sequence: " + loc + " reason:", e)
                    break
                if not ann:
                    num_no_hit = num_no_hit + 1
                    continue

                # features, gfe_name = gfe_maker.get_gfe(ann, loc)
                gfe_name = 'gfe_placeholder'
                l = 0
                for f in ann.annotation:
                    f_seq = ann.annotation[f] if isinstance(ann.annotation[f], DBSeq) else ann.annotation[f].seq
                    f_out.write(','.join([str(seq.description), gfe_name, f, ann.method, str(f_seq)]) + '\n')
                    l += len(f_seq)
                if n >= num_existing_ids and n % 1 == 0:
                    print('%s rows loaded after %.2f seconds (with a length of %s).'
                        ' Finished %s.'
                        ' %s sec average per sequence. %s with no hits' %
                            (n - num_existing_ids, time.time() - start_time_rel, len(seq),
                            seq.description,
                            (time.time() - start_time_abs) / (n + 1), num_no_hit))
                    start_time_rel = time.time()
                n += 1
        except Exception as e:
            print("Error with %s at index %s: %s" % (seq.description, n, e))
    
    print(n, "total rows loaded")

    if serv:
        server.close()


if __name__ == '__main__':
    """The following will be run if file is executed directly,
    but not if imported as a module"""
    main()
