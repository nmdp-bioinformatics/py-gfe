#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import pandas as pd

from Bio import SeqIO
from BioSQL import BioSeqDatabase
from BioSQL.BioSeq import DBSeq
from seqann import BioSeqAnn, gfe
from seqann.blast_cmd import get_locus
import time
import multiprocessing as mp

start_time_abs = f_out = gfe_maker = seqann = None
num_no_hit = n = 0

def main():
    """This is run if file is directly executed, but not if imported as
    module. Having this in a separate function  allows importing the file
    into interactive python, and still able to execute the
    function for testing"""
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file",
                        required=True,
                        help="input file",
                        type=str)

    parser.add_argument("-l", "--locus",
                        required=False,
                        help="HLA locus",
                        type=str)

    parser.add_argument("-o", "--output",
                        required=True,
                        help="Output file where GFE will be stored",
                        type=str)    

    parser.add_argument("-k", "--kir",
                        required=False,
                        help="Bool for KIR",
                        action='store_true')

    parser.add_argument("-s", "--server",
                        required=False,
                        help="BioSQL server",
                        default=False,
                        type=bool)

    parser.add_argument("-v", "--verbose",
                        help="Option for running in verbose",
                        action='store_true')

    args = parser.parse_args()
    fastafile = args.file
    loc = args.locus
    serv = args.server
    output_filename = args.output

    verbose = False
    if args.verbose:
        verbose = True

    kir = False
    if args.kir:
        kir = True

    server = None
    if serv:
        server = BioSeqDatabase.open_database(driver="pymysql", user="root",
                                              passwd="", host="localhost",
                                              db="bioseqdb")
    cpu_count = mp.cpu_count() - 1
    # cpu_count = 2
    pool = mp.Pool(cpu_count, initializer=init_seqann)
    print("Finished initializing pool with %s processors." % cpu_count)

    global f_out
    f_out = open(output_filename, 'a+')
    f_out.seek(0)
    descriptions = set()
    for line in f_out:
        descriptions.add(line.split(',')[0])
    num_existing_rows = len(descriptions)
    if num_existing_rows:
        print(num_existing_rows, "rows in existing output")
    else:
        f_out.write(','.join(['Description', 'GFE', 'Feature', 'Method', 'Sequence']) + '\n')

    global start_time_abs
    start_time_abs = time.time()

    global n
    parsed_existing_lines = False
    for seq in SeqIO.parse(fastafile, "fasta"):
        try:
            if seq.description in descriptions and not parsed_existing_lines:
                continue
            else:
                parsed = True
            if seq._seq and seq.description not in descriptions:
                # if not loc:
                #     loc = get_locus(seq, kir=kir, verbose=verbose,
                #                     refdata=seqann.refdata)
                id, project, method, source, allele_index, allele_name = seq.description.split('|')
                # id, allele_index, allele_name = seq.description.split('|')
                if 'homozygous' in allele_index.lower() and len(seq) % 2 == 0:
                    mid_point = int(len(seq)/2)
                    if str(seq[:mid_point]) == str(seq[mid_point:]):
                        seq = seq[:mid_point]
                pool.apply_async(run_seqann,
                    args=(seq, loc, kir, verbose), #, seqann, f_out),
                    callback=write_result)
        except Exception as e:
            print("Error with %s at index %s: %s" % (seq.description, n, e))
    
    pool.close()
    pool.join()
    print("%s total rows loaded after %.2f seconds" % (n, time.time() - start_time_abs))

    if serv:
        server.close()

def init_seqann():
    global seqann
    global gfe_maker
    global start_time_abs
    global i
    seqann = BioSeqAnn()
    gfe_maker = gfe.GFE()
    start_time_abs = time.time()
    i = 0
    print("SeqAnn object initialized")

def write_result(result):
    global num_no_hit
    global start_time_abs
    global n
    global f_out
    if result:
        n += 1
        f_out.write(result)
    else:
        num_no_hit += 1
    # global start_time_abs
    # global i
    # print('' % ((time.time() - start_time_abs) / (i + 1)))
    # i = i + 1
    print('%s rows loaded. %s with no hits. %s seconds average per sequence.' 
            % (n, num_no_hit, ((time.time() - start_time_abs) / (n + num_no_hit + 1))))

def run_seqann(seq, loc, kir, verbose):#seq, loc, kir, verbose, seqann, f_out):
    global seqann
    global gfe_maker
    if not loc:
        loc = get_locus(seq, kir=kir, verbose=verbose,
                        refdata=seqann.refdata)
    id, project, method, source, allele_index, allele_name = seq.description.split('|')
    # id, allele_index, allele_name = seq.description.split('|')

    ann = seqann.annotate(seq, loc, allele=allele_name)
    if not ann:
        print('No results with', seq.description)
        return ''
    features, gfe_name = gfe_maker.get_gfe(ann, loc)
    # gfe_name = 'gfe_placeholder'
    l = 0
    output = ''
    if ann:
        for f in ann.annotation:
            f_seq = ann.annotation[f] if isinstance(ann.annotation[f], DBSeq) else ann.annotation[f].seq
            output += ','.join([str(seq.description), gfe_name, f, ann.method, str(f_seq)]) + '\n'
            l += len(f_seq)
    return output

if __name__ == '__main__':
    """The following will be run if file is executed directly,
    but not if imported as a module"""
    main()
