#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import pandas as pd

from Bio import SeqIO
from BioSQL import BioSeqDatabase
from BioSQL.BioSeq import DBSeq
from seqann import BioSeqAnn, gfe
from seqann.blast_cmd import get_locus
import time
import multiprocessing as mp

seqann = None
f_out = None
start_time_abs = None
n = 0
num_no_hit = 0

def main():
    """This is run if file is directly executed, but not if imported as
    module. Having this in a separate function  allows importing the file
    into interactive python, and still able to execute the
    function for testing"""
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--file",
                        required=True,
                        help="input file",
                        type=str)

    parser.add_argument("-l", "--locus",
                        required=False,
                        help="HLA locus",
                        type=str)

    parser.add_argument("-o", "--output",
                        required=True,
                        help="Output file where GFE will be stored",
                        type=str)    

    parser.add_argument("-k", "--kir",
                        required=False,
                        help="Bool for KIR",
                        action='store_true')

    parser.add_argument("-s", "--server",
                        required=False,
                        help="BioSQL server",
                        default=False,
                        type=bool)

    parser.add_argument("-v", "--verbose",
                        help="Option for running in verbose",
                        action='store_true')

    args = parser.parse_args()
    fastafile = args.file
    loc = args.locus
    serv = args.server
    output_filename = args.output

    verbose = False
    if args.verbose:
        verbose = True

    kir = False
    if args.kir:
        kir = True

    server = None
    if serv:
        server = BioSeqDatabase.open_database(driver="pymysql", user="root",
                                              passwd="", host="localhost",
                                              db="bioseqdb")

    pool = mp.Pool(mp.cpu_count(), initializer=init_seqann)
    print("Finished initialized pool with %s processers" % mp.cpu_count())

    id_spacer = '{:*^20}'.format("")

    global f_out
    f_out = open(output_filename, 'a+')
    f_out.seek(0)
    ids = []
    for line in f_out:
        if id_spacer in line:
            spacer1, id, spacer2 = line.split(' ')
            ids.append(id)
    num_existing_ids = len(ids)
    if num_existing_ids:
        print(num_existing_ids, "rows in existing output")

    f_out.write(','.join(['Description', 'GFE', 'Feature', 'Method', 'Sequence']) + '\n')

    gfe_maker = gfe.GFE()
    global start_time_abs
    start_time_rel = start_time_abs = time.time()

    global n
    for seq in SeqIO.parse(fastafile, "fasta"):
        try:
            if seq._seq and seq.description not in ids:
                if not loc:
                    loc = get_locus(seq, kir=kir, verbose=verbose,
                                    refdata=seqann.refdata)
                id, project, method, source, allele_index, allele_name = seq.description.split('|')
            
                pool.apply_async(run_seqann,
                    args=(seq, loc, kir, verbose), #, seqann, f_out),
                    callback=write_result)
        except Exception as e:
            print("Error with %s at index %s: %s" % (seq.description, n, e))
    
    pool.close()
    pool.join()
    print("%s total rows loaded after %.2f seconds" % (n, time.time() - start_time_abs))

    if serv:
        server.close()

def init_seqann():
    global seqann
    seqann = BioSeqAnn()

def write_result(result):
    global f_out
    global num_no_hit
    global start_time_abs
    global n
    f_out.write(result)
    if not result:
        num_no_hit = num_no_hit + 1
        return
    n += 1
    print('%s rows loaded.'
        ' %s sec average per sequence. %s with no hits' %
        (n, (time.time() - start_time_abs) / (n + 1), num_no_hit))

def run_seqann(seq, loc, kir, verbose):#seq, loc, kir, verbose, seqann, f_out):
    global seqann
    if not loc:
        loc = get_locus(seq, kir=kir, verbose=verbose,
                        refdata=seqann.refdata)
    id, project, method, source, allele_index, allele_name = seq.description.split('|')
    ann = seqann.annotate(seq, loc, allele=allele_name)
    if not ann:
        return ''

    # features, gfe_name = gfe_maker.get_gfe(ann, loc)
    gfe_name = 'gfe_placeholder'
    l = 0
    output = ''
    for f in ann.annotation:
        f_seq = ann.annotation[f] if isinstance(ann.annotation[f], DBSeq) else ann.annotation[f].seq
        output += ','.join([str(seq.description), gfe_name, f, ann.method, str(f_seq)]) + '\n'
        l += len(f_seq)
    # f_out.write(output)
    return output

if __name__ == '__main__':
    """The following will be run if file is executed directly,
    but not if imported as a module"""
    main()
